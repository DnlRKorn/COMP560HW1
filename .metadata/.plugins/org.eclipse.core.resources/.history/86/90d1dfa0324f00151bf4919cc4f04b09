package maze;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class Maze {

	private boolean[][] mazeArray;

	public Vertex goal;
	public Vertex start;

	public int mazeWidth;
	public int mazeHeight;
	
	public Maze(String fileLoc){
		BufferedReader br = null;
		ArrayList<String> stringList = new ArrayList<String>(); 
		try {
			br = new  BufferedReader (new FileReader(fileLoc) );
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		try {
			String input = br.readLine();
			while(input != null){
				stringList.add(input);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		generateMazeArray(stringList);
		
	}
	
	public boolean canMoveLeft(Vertex v){
		return mazeArray[v.x-1][v.y];
	}
	
	public boolean canMoveRight(Vertex v){
		return mazeArray[v.x+1][v.y];
	}
	
	public boolean canMoveDown(Vertex v){
		return mazeArray[v.x][v.y-1];
	}
	
	public boolean canMoveUp(Vertex v){
		return mazeArray[v.x][v.y+1];
	}
	

	private void generateMazeArray(ArrayList<String> stringList){
		mazeWidth = stringList.get(0).length();
		mazeHeight = stringList.size();
		mazeArray = new boolean[mazeWidth][mazeHeight];
		for(int i = 0; i < mazeHeight; i++){
			String currentLine = stringList.get(i);
			for(int j = 0; j < mazeWidth; j++){
				if(currentLine.charAt(j) == '%'){
					mazeArray[i][j] = false;
				}
				else{
					if(currentLine.charAt(j) == 'S')
						
					mazeArray[i][j] = true;
				}
			}
		}
	}
}
