package maze;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class BreadthFirstSearch extends Search{
//	Vertex startSpace;
//	Vertex goalSpace;
//	Queue<Node> frontier;
//	LinkedList<Vertex> exploredSet;
//	Maze m;
//	Stack<Vertex> solution;
	
	public BreadthFirstSearch(Maze m, Vertex start, Vertex goal){
		solution = new Stack<Vertex>();
		startSpace = start;
		goalSpace = goal;
		frontier = new LinkedList<Node>();
		exploredSet = new LinkedList<Vertex>();
		frontier.add(new Node(start, null, null, 0));
		Node goalNode = null;
		boolean goalFound = false;
		
		while(!(frontier.isEmpty()||goalFound)){
			Node n = ((LinkedList<Node>) frontier).poll();
			Vertex v = n.nodeVertex;
			if(m.isGoalVertex(v)){
				goalFound = true;
				goalNode = n;
			}
			else{
				exploredSet.add(v);
				expandNode(n);
			}

		}
		int counter = 0;
		while(goalNode!=null){
			solution.add(goalNode.nodeVertex);
			System.out.printf("x:%d y:%d\n", goalNode.nodeVertex.x,goalNode.nodeVertex.y);
			goalNode = goalNode.parent;
			counter++;
		}
		System.out.printf("Number of steps %d\n", counter);
	}
	
//	public Stack<Vertex> getSolution(){
//		return solution;
//	}
//	
//	private boolean inExploredSet(Vertex v){
//		Iterator<Vertex> iter = exploredSet.iterator();
//		while(iter.hasNext()){
//			if(iter.next().equals(v)){
//				return true;
//			}
//		}
//		return false;
//	}
	
}