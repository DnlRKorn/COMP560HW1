package maze;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;

public class AStarSearch extends Search{

	public AStarSearch(Maze m, Vertex start, Vertex goal){
		solution = new Stack<Vertex>();
		startSpace = start;
		goalSpace = goal;
		frontier = new PriorityQueue<Node>(10 , new AStarNodeComparator());
		frontier.add(new Node(start, null, null, 0, manhattanDistance(start)));
		exploredSet = new LinkedList<Vertex>();
		Node goalNode = null;
		boolean goalFound = false;
		int expandedNodes = 0;
		while(!goalFound && !frontier.isEmpty()){
			Node n = ((PriorityQueue<Node>) frontier).poll();
			expandedNodes++;
			Vertex v = n.nodeVertex;
			if(m.isGoalVertex(v)){
				goalFound = true;
				goalNode = n;
			}
			else{
				exploredSet.add(v);
				expandNode(n);
			}
		}
		int counter = 0;
		while(goalNode!=null){
			solution.add(goalNode.nodeVertex);
			System.out.printf("x:%d y:%d\n", goalNode.nodeVertex.x,goalNode.nodeVertex.y);
			goalNode = goalNode.parent;
			counter++;
		}
		System.out.printf("Number of steps %d\n", counter);
		System.out.printf("Number of nodes expanded %d\n", expandedNodes);
		
	}


}