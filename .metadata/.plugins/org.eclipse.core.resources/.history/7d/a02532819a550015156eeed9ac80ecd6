package maze;

import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;

import maze.Maze.Direction;

public abstract class Search {
	Vertex startSpace;
	Vertex goalSpace;
	Collection<Node> frontier;
	LinkedList<Vertex> exploredSet;
	Maze m;
	Stack<Vertex> solution;
	
	public Stack<Vertex> getSolution(){
		return solution;
	}
	
	protected void expandNode(Node n){
		expandInDirection(Direction.left, n);
		expandInDirection(Direction.down, n);
		expandInDirection(Direction.right, n);
		expandInDirection(Direction.up, n);
	}
	
	private void expandInDirection(Direction d, Node n){
		Vertex v = n.nodeVertex;
		if(m.canMoveInDirection(n.nodeVertex, d)){
			if(d == Direction.left){
				Vertex temp = new Vertex(v.x-1,v.y);
			}
			if(!inExploredSet(temp)){
				System.out.printf("Adding Vertex (%d,%d)\n",temp.x,temp.y);
				frontier.add(new Node(temp,n,Maze.Direction.up,n.pathCost+1,manhattanDistance(temp)));
			}
		}
	}
	
	protected boolean inExploredSet(Vertex v){
		Iterator<Vertex> iter = exploredSet.iterator();
		while(iter.hasNext()){
			if(iter.next().equals(v)){
				return true;
			}
		}
		return false;
	}
	
	protected int manhattanDistance(Vertex v){
		return Math.abs(v.x-goalSpace.x)+Math.abs(v.y-goalSpace.y);
	}
}
